#!/usr/bin/env sh

echo "üîç Running pre-commit quality checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo "${BLUE}[PRE-COMMIT]${NC} $1"
}

print_success() {
    echo "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo "${RED}‚ùå $1${NC}"
}

# Function to stage modified files
stage_modified_files() {
    local modified_files=$(git diff --name-only)
    if [ -n "$modified_files" ]; then
        print_warning "Auto-formatting/linting modified files, staging them..."
        git add $modified_files
        return 0
    fi
    return 1
}

print_status "Step 1/6: Running code formatting..."

# Run Prettier formatting
if npm run format; then
    print_success "Code formatting completed"
    stage_modified_files
else
    print_error "Code formatting failed"
    exit 1
fi

print_status "Step 2/6: Running linting with auto-fix..."

# Run ESLint with auto-fix
if npm run lint:fix; then
    print_success "Linting completed with auto-fixes applied"
    stage_modified_files
else
    print_error "Linting failed - please fix the issues manually"
    exit 1
fi

print_status "Step 3/6: Running final lint check..."

# Verify linting passes after fixes
if npm run lint; then
    print_success "Final lint check passed"
else
    print_error "Lint check failed even after auto-fixes"
    print_error "Please fix the remaining issues manually and try again"
    exit 1
fi

print_status "Step 4/6: Running type checking..."

# Run Svelte type checking
if npm run check; then
    print_success "Type checking passed"
else
    print_error "Type checking failed"
    print_error "Please fix type errors and try again"
    exit 1
fi

print_status "Step 5/6: Running tests..."

# Run unit tests
if npm run test; then
    print_success "All tests passed"
else
    print_error "Tests failed"
    print_error "Please fix failing tests and try again"
    exit 1
fi

print_status "Step 6/6: Verifying build..."

# Run build to ensure it works
if npm run build; then
    print_success "Build verification passed"
else
    print_error "Build failed"
    print_error "Please fix build errors and try again"
    exit 1
fi

print_success "All quality checks passed! üéâ"

# https://stackoverflow.com/questions/3284292/can-a-git-hook-automatically-add-files-to-the-commit
# Create marker for post-commit hook to run social media generation
touch .commit