---
import Layout from '@layouts/Layout.astro'
import { getCollection } from 'astro:content'
import type { CollectionEntry } from 'astro:content'
import { sortNumber } from '@util/sort'
import ProjectsList from '@components/Projects/ProjectsList.svelte'

const entries: CollectionEntry<'projects'>[] = await getCollection('projects')

const sortedEntries = entries.sort((a, b) =>
  sortNumber(a.data.prio, b.data.prio)
)

const usedEntryCategoryIds = [
  ...new Set(entries.map((entry) => entry.data.category.id)),
]
const categories: CollectionEntry<'categories'>[] = await getCollection(
  'categories',
  (category: CollectionEntry<'categories'>) =>
    usedEntryCategoryIds.includes(category.id)
)

const usedEntryTagIds = [
  ...new Set(
    entries.flatMap((entry) =>
      entry.data.tags.map((tag) => tag.id)
    )
  ),
]
const tags: CollectionEntry<'tags'>[] = await getCollection(
  'tags',
  (tag: CollectionEntry<'tags'>) => usedEntryTagIds.includes(tag.id)
)
---

<Layout title="Projects">
	<ProjectsList entries={sortedEntries} {categories} {tags}/>
</Layout>

<style lang="postcss">
	section {
		display: grid;
		grid-template-rows: auto auto auto;
		grid-template-columns: 70ch 1fr;
		column-gap: var(--l);
		row-gap: var(--l);
		width: 100%;
		@media screen and (max-width: 74rem) {
			grid-template-columns: 1fr 18rem;
		}
		@media screen and (max-width: 50rem) {
			grid-template-columns: 1fr;
		}
		.entries {
			width: 100%;
			display: flex;
			flex-direction: column;
			flex-wrap: nowrap;
			align-content: stretch;
			justify-content: flex-start;
			align-items: stretch;
			gap: var(--l);
			@media screen and (max-width: 50rem) {
				grid-template-columns: 1fr;
				order: 1;
			}
		.entry {
			transition: var(--transition);
			&:hover {
				transform: scale(0.97);
				cursor: pointer;
				:global(svg) {
					opacity: 1;
				}
			}
			> a {
				display: flex;
				position: relative;
				flex-direction: row;
				flex-wrap: nowrap;
				align-content: stretch;
				justify-content: space-between;
				align-items: flex-start;
				gap: var(--l);
				color: var(--c-font);
				text-decoration: none;
				@media screen and (max-width: 50rem) {
					flex-direction: column-reverse;
				}
				.column {
					display: flex;
					flex-direction: column;
					flex-wrap: nowrap;
					align-content: stretch;
					justify-content: flex-start;
					align-items: stretch;
					gap: var(--xs);
				}
				.title {
					display: inline-block;
					font-weight: 900;
					font-size: var(--font-m);
					line-height: 1.2;
					font-family: var(--font-family);
					letter-spacing: var(--font-letter-spacing-headline);
				}
				.category {
					flex-base: 100%;
					display: flex;
					flex-grow: 1;
					flex-direction: row;
					flex-wrap: wrap;
					align-content: stretch;
					justify-content: flex-start;
					align-items: flex-start;
					gap: var(--xs);
					font-size: var(--font-s);
				}
				.date {
					display: inline-block;
					margin: 0 0 var(--xs) 0;
					color: var(--c-font);
					font-weight: 400;
					font-size: var(--font-m);
					text-decoration: none;
					font-style: italic;
					text-align: right;
					flex-shrink: 0;
					@media screen and (max-width: 50rem) {
						margin: 0 0 calc(-1 * var(--m)) 0;
						flex-shrink: 1;
					}
				}
				:global(.arrow) {
					color: var(--c-font-accent-dark);
					size: var(--l);
					position: absolute;
					top: var(--m);
					right: calc((-1) * var(--m));
					opacity: 0;
					transition: var(--transition);
					border: 4px solid var(--c-light);
					border-radius: 100%;
					background: var(--c-light);
					box-shadow:
						0 1px 2px rgba(0, 0, 0, 0.03),
						0 2px 4px rgba(0, 0, 0, 0.03),
						0 4px 8px rgba(0, 0, 0, 0.03),
						0 8px 16px rgba(0, 0, 0, 0.03),
						0 16px 32px rgba(0, 0, 0, 0.03),
						0 32px 64px rgba(0, 0, 0, 0.03);
				}
			
		}
	}
		}
		aside {
			display: flex;
			flex-direction: column;
			flex-wrap: nowrap;
			align-content: stretch;
			justify-content: flex-start;
			align-items: stretch;
			gap: var(--l);
			width: 100%;
			@media screen and (max-width: 50rem) {
				grid-template-columns: 1fr;
				order: 0;
			}
		}
	}
</style>
